FROM armada8040:linaro_gcc
# https://developer.solid-run.com/knowledge-base/armada-8040-machiatobin-u-boot-and-atf/
# Build specific deps
RUN apt-get update &&\
  apt-get install $APT_FLAGS bison flex openssl libssl-dev &&\
  apt-get autoremove $APT_FLAGS && apt-get clean $APT_FLAGS &&\
  rm -rf /var/lib/apt/lists* /tmp/* /var/tmp/*

# Change user
USER build
WORKDIR /build/

# Copy code
RUN git clone https://github.com/MarvellEmbeddedProcessors/atf-marvell.git -b atf-v1.5-armada-18.12 &&\
  git clone https://github.com/MarvellEmbeddedProcessors/binaries-marvell.git -b binaries-marvell-armada-18.12 &&\
  git clone https://github.com/MarvellEmbeddedProcessors/mv-ddr-marvell.git -b mv_ddr-armada-18.12 &&\
  git clone http://git.denx.de/u-boot.git && cd u-boot && git checkout v2020.04

# Change user
USER build
WORKDIR /build/

# Global build vars
ENV CROSS_COMPILE=/build/gcc-linaro/bin/aarch64-linux-gnu-

# Build uboot obj
WORKDIR /build/u-boot
RUN make mvebu_mcbin-88f8040_defconfig &&\
  make -j4

# Build marvel specifics and image
WORKDIR /build/atf-marvell
RUN make PLAT=a80x0_mcbin MV_DDR_PATH=../mv-ddr-marvell SCP_BL2=/dev/null clean &&\
  make PLAT=a80x0_mcbin MV_DDR_PATH=../mv-ddr-marvell SCP_BL2=../binaries-marvell/mrvl_scp_bl2.img BL33=../u-boot/u-boot.bin all fip

# cp uboot.dockerfile dockerfile
# docker build --rm --force-rm -t armada8040:uboot .
# docker run -ti --name uboot armada8040:uboot
# docker cp uboot:/build/atf-marvell/build/a80x0_mcbin/release/flash-image.bin ./images/
# docker rm uboot
# docker rmi armada8040:uboot
